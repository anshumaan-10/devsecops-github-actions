name: Build and Push Docker Image to GHCR or GAR

on:
  # workflow_dispatch:
  #   inputs:
  #     tag:
  #       description: 'Docker image tag (optional)'
  #       required: false
  #       default: 'latest'  # Default value for the tag if not provided
  workflow_call:
    outputs:
      app_imageurl:
        description: 'The image tag of the new Docker image'
        value: ${{ jobs.build-docker-image.outputs.op_image_url} }}


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: '${{ github.event.repository.name }}'
  IMAGE_ID: 'ghcr.io/${{ github.event.repository.name }}/temp:v01'
  GAR_NAME: 'asia-south1-docker.pkg.dev'
  GAR_REPO_NAME: 'asia-south1-docker-images-multiregion-prod'
  GOOGLE_CLOUD_PROJECT: 'avian-voice-433417-d5'
  tag: 'default'
  TAG_VERSION: 'default'
  workflow_name: 'gcp-invalid'
  IMAGE_NAME_WITH_TAG: 'default:default'
  PAC_ACTION: 'continue'


jobs:
  validate_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check Branch
        run: |
          echo "You are using a  ${{ github.ref_name }} ${{ github.head_ref }}branch with ${{github.event_name}} as action"
          if ["${{ github.ref_name }}" == 'release' ] || [ "${{ github.base_ref }}" == 'release' ]; then
            echo "The branch follows 'gcp-release' workflows."
            echo "workflow_name=nonprod" >> $GITHUB_ENV
            echo "REGISTRY=ghcr.io" >> $GITHUB_ENV
            echo "PAC_ACTION=continue" >> $GITHUB_ENV
          
          elif [ "${{ github.ref_name }}" == 'main' ] || [ "${{ github.base_ref }}" == 'main']; then
            echo "The branch follows 'prod' workflows."
            echo "workflow_name=prod" >> $GITHUB_ENV
            echo "REGISTRY=${GAR_NAME}/${GOOGLE_CLOUD_PROJECT}/${GAR_REPO_NAME}" >> $GITHUB_ENV
            echo "PAC_ACTION=break" >> $GITHUB_ENV
            echo "IMAGE_ID=${GAR_NAME}/${GOOGLE_CLOUD_PROJECT}/${GAR_REPO_NAME}/${{ github.event.repository.name }}" >> $GITHUB_ENV
            echo "Imageid is $IMAGE_ID"
          else
            echo "The branch is invalid. Use 'gcp-release' or 'z5-main' as your branch."
            env.workflow_name='Invalid'
            exit 1
          fi
    outputs:
      op_workflow_name: ${{ env.workflow_name }}
      op_registry: ${{ env.REGISTRY }}
      op_pac_action: ${{ env.PAC_ACTION }}


  build-docker-image:
    outputs:
      op_image_url: ${{ steps.main-build.outputs.imageurl }}
    runs-on: ubuntu-latest
    needs: validate_branch
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Log into GHCR registry 
        if: needs.validate_branch.outputs.op_workflow_name == 'nonprod'  
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into Google Artifact registry 
        if: needs.validate_branch.outputs.op_workflow_name == 'prod' 
        uses: docker/login-action@v3
        with: 
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      # compile
      - name: Build with Maven
        run: mvn clean package -B -Dmaven.test.skip
      - run: mkdir candidate-binary && cp target/*.jar candidate-binary
      # test
      - name: Test with Maven
        run: mvn test

      - name: Build Docker image for NonProd Environment
        id: release-build
        if: needs.validate_branch.outputs.op_workflow_name == 'nonprod'
        run: |
          echo "Building for Nonprod in progress..."
          pwd
          ls -lart
          docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')  # Lowercase the image ID
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo IMAGE_ID=$IMAGE_ID >> $GITHUB_ENV
          echo VERSION=$VERSION >> $GITHUB_ENV
          export tag=$VERSION-$(TZ='Asia/Calcutta' date "+%Y%m%d.%H%M")
          echo tag=$tag >> $GITHUB_ENV
          export TAG_VERSION=$tag
          export IMAGE_NAME_WITH_TAG="ghcr.io/anshumaan-10/$(basename ${{ github.repository }}):${TAG_VERSION}"

          docker tag $IMAGE_NAME $IMAGE_ID:$tag
          docker images
          echo "IMAGE_NAME_WITH_TAG=$IMAGE_NAME_WITH_TAG" >> $GITHUB_ENV
          echo "imageurl=$IMAGE_NAME_WITH_TAG" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
          export IMAGE_NAME="$(basename ${{ github.repository }}):$TAG_VERSION"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build Docker image for Prod Environment
        id: main-build
        if: needs.validate_branch.outputs.op_workflow_name == 'prod'
        run: |
          echo "Building for Prod in progress"
          pwd
          ls -lart
          export GOOGLE_CLOUD_PROJECT="avian-voice-433417-d5"
          export GAR_REPO_NAME="asia-south1-docker-images-multiregion-prod"
          
          # Convert repository name to lowercase
          #REPO_NAME_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[A-Z]' '[a-z]')
          
          export IMAGE_ID=${GAR_NAME}/${GOOGLE_CLOUD_PROJECT}/${GAR_REPO_NAME}/${{ github.event.repository.name }}
          
          # Build the Docker image
          docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
          
          # Change all uppercase to lowercase for IMAGE_ID
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          echo "VERSION=$VERSION"
          echo "IMAGE_ID-->$IMAGE_ID"

          # Create a timestamped tag
          export tag=$VERSION-$(TZ='Asia/Calcutta' date "+%Y%m%d.%H%M")
          echo tag=$tag >> $GITHUB_ENV
          export TAG_VERSION=$tag
          export IMAGE_NAME_WITH_TAG="$IMAGE_ID:$TAG_VERSION"
          
          echo "IMAGE_NAME_WITH_TAG-->$IMAGE_NAME_WITH_TAG"

          # Tag the image with the correct ID and version
          docker tag $IMAGE_NAME $IMAGE_ID:$TAG_VERSION
          
          # List Docker images for verification
          docker images
          
          # Output necessary variables
          echo "IMAGE_NAME_WITH_TAG=$IMAGE_NAME_WITH_TAG" >> $GITHUB_ENV
          echo "imageurl=$IMAGE_NAME_WITH_TAG" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
          
          # Final export of IMAGE_NAME
          export IMAGE_NAME="${IMAGE_ID}:$TAG_VERSION"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Analyze for critical and high CVEs using docker scout
        id: docker-scout-cves
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.IMAGE_NAME_WITH_TAG }}
          only-severities: critical,high
          sarif-file: sarif.output.json
          summary: true
      
      - name: Upload SARIF result
        id: upload-sarif
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: sarif.output.json

      # - name: Run Trivy vulnerability scanner
      #   id: trivy-scan
      #   uses: aquasecurity/trivy-action@0.20.0
      #   with:
      #       image-ref: ${{ env.IMAGE_NAME_WITH_TAG }}
      #       format: 'sarif'
      #       output: 'trivy-results.sarif'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   if: always()
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #       sarif_file: 'trivy-results.sarif'

      # Push the Docker image to the appropriate registry
      - name: Push Docker image to GHCR
        if: needs.validate_branch.outputs.op_workflow_name == 'nonprod'
        run: |
          echo "Pushing image to GHCR..."
          docker images
          docker push ${{ env.IMAGE_ID }}:${{ env.tag }}
      
      - name: Authenticate to GCP
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      

      - name: Push Docker image to GAR
        if: needs.validate_branch.outputs.op_workflow_name == 'prod'
        run: |
          echo "Authenticating to GAR..."
          gcloud auth configure-docker asia-south1-docker.pkg.dev
          echo "Pushing image to GAR..."
          docker push ${{ steps.main-build.outputs.imageurl }}


